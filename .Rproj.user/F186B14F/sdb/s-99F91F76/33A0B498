{
    "collab_server" : "",
    "contents" : "# anova_lmer.R - anova method for lmerModLmerTest objects\n\n#' @include lmer.R\nNULL\n\n##############################################\n######## anova method for lmerModLmerTest\n##############################################\n#' ANOVA Tables for Linear Mixed Models\n#'\n#' ANOVA table with F-tests and p-values using Satterthwaite's method for\n#' denominator degrees-of-freedom. Models should be fitted with\n#' \\code{\\link{lmer}} from the \\pkg{lmerTestR}-package.\n#'\n#' @param object an \\code{lmerModLmerTest} object; the result of \\code{lmer()}\n#' after loading the \\pkg{lmerTestR}-package.\n#' @param ... potentially additional \\code{lmer} or \\code{lm} model objects for\n#' comparison of models in which case \\code{type} and \\code{ddf} arguments are\n#' ignored.\n#' @param type the type of ANOVA table requested (using SAS terminology)\n#' with Type I being the familiar sequential ANOVA table.\n#' @param ddf the method for computing the denominator degrees of freedom.\n#' \\code{ddf = \"lme4\"} returns the lme4-anova table, i.e., using the anova\n#' method for \\code{lmerMod} objects as defined in the \\pkg{lme4}-package and\n#' ignores the \\code{type} argument.\n#'\n#' @return an ANOVA table\n#' @seealso \\code{\\link{contestMD}} for multi degree-of-freedom contrast tests.\n#' @author Rune Haubo B. Christensen\n#' @importFrom methods is callNextMethod\n#' @export\n#'\n#' @examples\n#'\n#' data(\"sleepstudy\", package=\"lme4\")\n#' m <- lmer(Reaction ~ Days + (Days | Subject), sleepstudy)\n#' anova(m) # with p-values from F-tests using Satterthwaite's denominator df\n#' anova(m, ddf=\"lme4\")\n#'\nsetMethod(\"anova\",\n          signature(object=\"lmerModLmerTest\"),\n          function(object, ..., type = c(\"I\", \"II\", \"III\", \"1\", \"2\", \"3\"),\n                   ddf=c(\"Satterthwaite\", \"KR\", \"lme4\")) {\n            mCall <- match.call(expand.dots = TRUE)\n            dots <- list(...)\n            models <- if(length(dots))\n              sapply(dots, is, \"merModLmerTest\") | sapply(dots, is, \"merMod\") |\n              sapply(dots, is, \"lm\") else logical(0)\n            if(any(models)) return(callNextMethod())\n            ddf <- match.arg(ddf)\n            # type <- match.arg(type) # not actually needed\n            if(ddf==\"lme4\") return(callNextMethod())\n            single_anova(object=object, type=type, ddf=ddf)\n          })\n\n\n##############################################\n######## anova function for single models\n##############################################\n#' ANOVA Tables for Linear Mixed Models\n#'\n#' @param object an \\code{lmerModLmerTest} object; the result of \\code{lmer()}\n#' after loading the \\pkg{lmerTestR}-package.\n#' @param type the type of ANOVA table requested (using the SAS terminology for\n#' these) with Type I being the familiar sequential ANOVA table.\n#' @param ddf method for computing denominator degrees of freedom.\n#'\n#' @return an ANOVA table\n#' @importFrom utils as.roman\n#' @importFrom stats model.matrix terms formula\n#' @author Rune Haubo B. Christensen\n#'\n#' @keywords internal\nsingle_anova <- function(object, type = c(\"I\", \"II\", \"III\", \"1\", \"2\", \"3\"),\n                         ddf=c(\"Satterthwaite\", \"KR\")) {\n  if(!inherits(object, \"lmerModLmerTest\"))\n    warning(\"calling anova(<fake-lmerModLmerTest-object>) ...\")\n  type <- as.integer(as.roman(match.arg(type)))\n  if(type > 1L) {\n    warning(\"Type II and III anova tables are not yet implemented; returning type I\")\n    type <- 1L\n  }\n  ddf <- match.arg(ddf)\n  if(ddf == \"KR\")\n    warning(\"KR method not yet implemented. Using Satterthwaite instead\",\n            call.=FALSE)\n  # Get list of contrast matrices (L) - one for each model term:\n  L_list <- get_contrasts_type1(model.matrix(object), terms(object))\n  # Get F-test for each term and collect in table:\n  table <- rbindall(lapply(L_list, contestMD, model=object))\n  # Format ANOVA table and return:\n  rownames(table) <- names(L_list)\n  response_name <- deparse(formula(object)[[2L]], width.cutoff = 500L)\n  attr(table, \"heading\") <-\n    paste(\"Type\", as.roman(type), \"Analysis of Variance Table\",\n          \"with\", paste0(ddf, \"\\'s\"), \"method\")\n  class(table) <- c(\"anova\", \"data.frame\")\n  table\n}\n\n###############################################################################\n######## Type I anova functions below\n###############################################################################\n\n##############################################\n######## get_contrasts_type1\n##############################################\n\n#' Type I ANOVA table contrasts\n#'\n#' @param X a design matrix - usually from \\code{model.matrix}. \\code{X} must\n#' have an \\code{assign} attribute.\n#' @param terms a terms object.\n#' @param keep_intercept defaults to \\code{FALSE}. If \\code{TRUE} a contrast\n#' for the intercept is included in the returned list of contrast matrices.\n#'\n#' @return List of contrast matrices - one contrast matrix for each model term.\n#' @importFrom stats setNames\n#' @author Rune Haubo B. Christensen\n#'\n#' @keywords internal\nget_contrasts_type1 <- function(X, terms, keep_intercept = FALSE) {\n  p <- ncol(X)\n  # Compute 'normalized' doolittle factorization of XtX:\n  # L <- t(doolittle(crossprod(X)))\n  L <- normalized_doolittle(crossprod(X))\n  # Determine which rows of L belong to which term:\n  asgn <- attr(X, \"assign\")\n  stopifnot(!is.null(asgn))\n  term_labels <- attr(terms, \"term.labels\")\n  term_names <- if(attr(terms, \"intercept\"))\n    c(\"(Intercept)\", term_labels) else term_labels\n  term_names <- term_names[1 + unique(asgn)] # order appropriately\n  # Compute list of row indicators for L matrix:\n  ind.list <- setNames(split(1L:p, asgn), nm=term_names)\n  ind.list <- ind.list[term_labels] # rm intercept if present\n  lapply(ind.list, function(rows) L[rows, , drop=FALSE])\n}\n\n",
    "created" : 1516177698891.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1716399080",
    "id" : "33A0B498",
    "lastKnownWriteTime" : 1516202459,
    "last_content_update" : 1516202459041,
    "path" : "~/Documents/Rpackages/lmerTestR/pkg/R/lmer_anova.R",
    "project_path" : "R/lmer_anova.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}